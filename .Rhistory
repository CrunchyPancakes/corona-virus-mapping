mapcoords <- coord_fixed(xlim = c(-150, 180), ylim = c(-55, 80))
setwd("C:\Users\30mat\Documents\VUW\Corona Virus Data Analytics\Mapping")
nodes <- read_csv("node_list_with_lat_lon.csv")
edges <- read_csv("edge_list.csv")
maptheme <- theme(panel.grid = element_blank()) +
theme(axis.text = element_blank()) +
theme(axis.ticks = element_blank()) +
theme(axis.title = element_blank()) +
theme(legend.position = "bottom") +
theme(panel.grid = element_blank()) +
theme(panel.background = element_rect(fill = "#596673")) +
theme(plot.margin = unit(c(0, 0, 0.5, 0), 'cm'))
country_shapes <- geom_polygon(aes(x = long, y = lat, group = group),
data = map_data('world'),
fill = "#CECECE", color = "#515151",
size = 0.15)
mapcoords <- coord_fixed(xlim = c(-150, 180), ylim = c(-55, 80))
# Drawing the map
ggplot(nodes) + country_shapes
ggplot(nodes) %>%
country_shapes
setwd("C:\Users\30mat\Documents\VUW\Corona Virus Data Analytics\Mapping")
nodes <- read_csv("data/node_list_with_lat_lon.csv")
edges <- read_csv("data/edge_list.csv")
ggplot(nodes) + country_shapes %>%
geom_point(aes(x = lon, y = lat, size = weight),
shape = 21, fill = 'white',
color = 'black', stroke = 0.5)
ggplot(nodes) + country_shapes +
geom_point(aes(x = lon, y = lat, size = weight),
shape = 21, fill = 'white',
color = 'black', stroke = 0.5)
# Drawing the map
ggplot(nodes) + country_shapes +
geom_point(aes(x = lon, y = lat, size = 10),
shape = 21, fill = 'white',
color = 'black', stroke = 0.5)
ggplot(nodes) + country_shapes +
geom_point(aes(x = lon, y = lat, size = 10),
shape = 21, fill = 'red',
color = 'black', stroke = 0.5)
lappy(edges, function(x){
source_node <- x[1]
target_node <- x[2]
source_x <- filter(nodes,
node_id %in% source_node)
})
lapply(edges, function(x){
source_node <- x[1]
target_node <- x[2]
source_x <- filter(nodes,
node_id %in% source_node)
})
test_filter <- lapply(edges, function(x){
source_node <- x[1]
target_node <- x[2]
source_x <- filter(nodes,
node_id == "1 - BetaCov")
})
test_filter <- lapply(edges, function(x){
source_node <- x[1]
target_node <- x[2]
source_x <- filter(nodes,
node_id %in% "1 - BetaCov")
})
source_x <- filter(nodes,
node_id %in% "1 - BetaCov")
source_x <- filter(nodes,
node_id %in% c("1 - BetaCov"))
View(source_x)
source_x <- filter(nodes,
node_id == "1 - BetaCov")
view(head(nodes, 5))
source_x <- filter(nodes,
node_id == "1 - BetaCoV")
source_nodes <- filter(nodes,
node_id == edges$source)
source_nodes <- filter(nodes,
node_id %in% edges$source)
source_nodes <- filter(nodes,
node_id %in% edges$source)
target_nodes <- filter(nodes,
node_id %in% edges$target)
source_target_coords <- cbind(source_nodes,
target_nodes)
view(head(source_target_coords, 5))
library(dplyr)
source_node_coords <-
source_nodes %>% select(lon, lat)
source_nodes <- filter(nodes,
node_id %in% edges$source)
target_nodes <- filter(nodes,
node_id %in% edges$target)
source_node_coords <-
source_nodes %>% select(lon, lat)
names(source_node_coords) <- c("sourceLon",
"sourceLat")
target_node_coords <-
target_nodes %>% select(lon, lat)
names(target_node_coords) <- c("targetLon",
"targetLat")
edge_coords <- cbind(source_node_coords,
target_node_coords)
view(head(edge_coords, 10))
# Drawing the map
ggplot(nodes) + country_shapes +
# Draw nodes as points
geom_point(aes(x = lon, y = lat, size = 10),
shape = 21, fill = 'red',
color = 'black', stroke = 0.5) +
# Draw edges as curves
geom_curve(aes(x = startLon, y = startLat, xend = targetLon, yend = targetLat,
color = category, size = weight),
data = edge_coords, curvature = 0.33,
alpha = 0.5) +
scale_size_continuous(guide = FALSE, range = c(0.25, 2))
# Drawing the map
ggplot(nodes) + country_shapes +
# Draw nodes as points
geom_point(aes(x = lon, y = lat, size = 10),
shape = 21, fill = 'red',
color = 'black', stroke = 0.5) +
# Draw edges as curves
geom_curve(aes(x = startLon, y = startLat, xend = targetLon, yend = targetLat,
color = "blue", size = 10),
data = edge_coords, curvature = 0.33,
alpha = 0.5) +
scale_size_continuous(guide = FALSE, range = c(0.25, 2))
# Drawing the map
ggplot(nodes) + country_shapes +
# Draw nodes as points
geom_point(aes(x = lon, y = lat, size = 10),
shape = 21, fill = 'red',
color = 'black', stroke = 0.5) +
# Draw edges as curves
geom_curve(aes(x = sourceLon, y = sourceLat, xend = targetLon, yend = targetLat,
color = "blue", size = 10),
data = edge_coords, curvature = 0.33,
alpha = 0.5) +
scale_size_continuous(guide = FALSE, range = c(0.25, 2))
# Drawing the map
ggplot(nodes) + country_shapes +
# Draw nodes as points
geom_point(aes(x = lon, y = lat, size = 10),
shape = 21, fill = 'red',
color = 'black', stroke = 0.5) +
# Draw edges as curves
geom_curve(aes(x = sourceLon, y = sourceLat, xend = targetLon + 1, yend = targetLat + 1,
color = "blue", size = 10),
data = edge_coords, curvature = 0.33,
alpha = 0.5) +
scale_size_continuous(guide = FALSE, range = c(0.25, 2))
# Drawing the map
ggplot(nodes) + country_shapes +
# Draw nodes as points
geom_point(aes(x = lon, y = lat, size = 10),
shape = 21, fill = 'red',
color = 'black', stroke = 0.5) +
# Draw edges as curves
geom_curve(aes(x = sourceLon, y = sourceLat, xend = targetLon + 1, yend = targetLat + 1,
fill = "blue", size = 10),
data = edge_coords, curvature = 0.33,
alpha = 0.5) +
scale_size_continuous(guide = FALSE, range = c(0.25, 2))
# Drawing the map
ggplot(nodes) + country_shapes +
# Draw nodes as points
geom_point(aes(x = lon, y = lat, size = 10),
shape = 21, fill = 'red',
color = 'black', stroke = 0.5) +
# Draw edges as curves
geom_curve(aes(x = sourceLon, y = sourceLat, xend = targetLon + 1, yend = targetLat + 1,
color = "blue", size = 10),
data = edge_coords, curvature = 0.33,
alpha = 0.5) +
scale_size_continuous(guide = FALSE, range = c(0.25, 2))
# Drawing the map
ggplot(nodes) + country_shapes +
# Draw nodes as points
geom_point(aes(x = lon, y = lat, size = 10),
shape = 21, fill = 'red',
color = 'black', stroke = 0.5) +
# Draw edges as curves
geom_curve(aes(x = sourceLon, y = sourceLat, xend = targetLon + 1, yend = targetLat + 1,
colour = "blue", size = 10),
data = edge_coords, curvature = 0.33,
alpha = 0.5) +
scale_size_continuous(guide = FALSE, range = c(0.25, 2))
# Drawing the map
ggplot(nodes) + country_shapes +
# Draw nodes as points
geom_point(aes(x = lon, y = lat, size = 10),
shape = 21, fill = 'red',
color = 'black', stroke = 0.5) +
# Draw edges as curves
geom_curve(aes(x = sourceLon, y = sourceLat, xend = targetLon + 1, yend = targetLat + 1,
colour = "blue", size = 10),
data = edge_coords, curvature = 0.33,
alpha = 0.5) +
scale_color_manual(values=c("#CC6666", "#9999CC")) +
scale_size_continuous(guide = FALSE, range = c(0.25, 2))
# Drawing the map
ggplot(nodes) + country_shapes +
# Draw nodes as points
geom_point(aes(x = lon, y = lat, size = 10),
shape = 21, fill = 'red',
color = 'black', stroke = 0.5) +
# Draw edges as curves
geom_curve(aes(x = sourceLon, y = sourceLat, xend = targetLon + 1, yend = targetLat + 1,
colour = "blue", size = 10),
data = edge_coords, curvature = 0.33,
alpha = 0.5) +
scale_color_manual(values=c("blue", "purple")) +
scale_size_continuous(guide = FALSE, range = c(0.25, 2))
# Drawing the map
ggplot(nodes) + country_shapes +
# Draw nodes as points
geom_point(aes(x = lon, y = lat, size = 100),
shape = 21, fill = 'red',
color = 'black', stroke = 0.5) +
# Draw edges as curves
geom_curve(aes(x = sourceLon, y = sourceLat, xend = targetLon + 1, yend = targetLat + 1,
colour = "blue", size = 10),
data = edge_coords, curvature = 0.33,
alpha = 0.5) +
scale_color_manual(values=c("blue", "purple")) +
scale_size_continuous(guide = FALSE, range = c(0.25, 2))
# Drawing the map
ggplot(nodes) + country_shapes +
# Draw nodes as points
geom_point(aes(x = lon, y = lat, size = 100),
shape = 21, fill = 'red',
color = 'black', stroke = 0.5) +
# Draw edges as curves
geom_curve(aes(x = sourceLon, y = sourceLat, xend = targetLon + 1, yend = targetLat + 1,
colour = "blue", size = 10),
data = edge_coords, curvature = 0.33,
alpha = 0.5) +
scale_color_manual(values=c("blue")) +
scale_size_continuous(guide = FALSE, range = c(0.25, 2))
# Drawing the map
ggplot(nodes) + country_shapes +
# Draw nodes as points
geom_point(aes(x = lon, y = lat, size = 100),
shape = 21, fill = 'red',
color = 'black', stroke = 0.5) +
# Draw edges as curves
geom_curve(aes(x = sourceLon, y = sourceLat, xend = targetLon + 1, yend = targetLat + 1,
colour = "blue", size = 10),
data = edge_coords, curvature = 0.33,
alpha = 0.5) +
scale_color_manual(values=c("blue")) +
scale_size_continuous(guide = FALSE, range = c(0.25, 2)) +
# Draw labels
geom_text(aes(x = lon, y = lat, label = location_name),
hjust = 0, nudge_x = 1, nudge_y = 4,
size = 3, color = "white", fontface = "bold") +
mapcoords + maptheme
library(igraph)
library(leaflet)
library(png)
library(plyr)
library(sp)
library(tidyverse)
setwd("C:\Users\30mat\Documents\VUW\Corona Virus Data Analytics\Mapping")
nodes <- read_csv("data/node_list_with_lat_lon.csv")
edges <- read_csv("data/edge_list.csv")
edge_source_target <- cbind(edges[,1], edges[,2])
n <- graph.data.frame(edge_source_target,
directed = TRUE,
vertices = nodes)
network <- get.data.frame(n, "both")
vert <- network$vertices
coordinates(vert) <- ~ lon + lat
edges_igraph <- network$edges
edges_igraph
edges <- network$edges
edges
edges <- read_csv("data/edge_list.csv")
edges <- network$edges
edges
nodes <- read_csv("data/node_list_with_lat_lon.csv")
edges <- read_csv("data/edge_list.csv")
edge_source_target <- cbind(edges[,1], edges[,2])
n <- graph.data.frame(edge_source_target,
directed = TRUE,
vertices = nodes)
network <- get.data.frame(n, "both")
vert <- network$vertices
coordinates(vert) <- ~ lon + lat
edges <- network$edges
edges
edges_igraph <- network$edges
edges <- read_csv("data/edge_list.csv")
edges <- lapply(l:nrow(edges),
function(i){
as(rbind(vert[vert$name == edges[i, "from"], ],
vert[vert$name == edges[i, "to"], ]),
"SpatialLines")
}
)
edges <- lapply(1:nrow(edges),
function(i){
as(rbind(vert[vert$name == edges[i, "from"], ],
vert[vert$name == edges[i, "to"], ]),
"SpatialLines")
}
)
edges_igraph <- network$edges
edges_igraph <- lapply(1:nrow(edges_igraph),
function(i){
as(rbind(vert[vert$name == edges_igraph[i, "from"], ],
vert[vert$name == edges_igraph[i, "to"], ]),
"SpatialLines")
}
)
edges_igraph
for(i in seq_along(edges_igraph)) {
edges_igraph[[i]] <- spChFIDs(edges_igraph[[i]], as.character(i))
}
edges_igraph <- do.call(rbind, edges_igraph)
edges
edges_igraph
leaflet(vert) %>%
addTiles() %>%
addCircles(data = vert, radius = 1000, weight = 20) %>%
addPolylines(data = edges_igraph, color = "#000000")
# Using original edge file, rather than edge_igraph extracted just for the network
edges <- lapply(1:nrow(edges),
function(i){
as(rbind(vert[vert$name == edges[i, "from"], ],
vert[vert$name == edges[i, "to"], ]),
"SpatialLines")
}
)
# Using original edge file, rather than edge_igraph extracted just for the network
edges <- lapply(1:nrow(edges),
function(i){
as(rbind(vert[vert$name == edges[i, "source"], ],
vert[vert$name == edges[i, "target"], ]),
"SpatialLines")
}
)
vert
# Using original edge file, rather than edge_igraph extracted just for the network
edges <- lapply(1:nrow(edges),
function(i){
as(rbind(vert[vert$name == edges[i, "source"], ],
vert[vert$name == edges[i, "target"], ]),
"SpatialLines")
}
)
edges_igraph <- cbind(edges_igraph, edges[,4])
edges_igraph <- network$edges
edges_igraph <- cbind(edges_igraph, edges[,4])
edges_igraph <- lapply(1:nrow(edges_igraph),
function(i){
as(rbind(vert[vert$name == edges_igraph[i, "from"], ],
vert[vert$name == edges_igraph[i, "to"], ]),
"SpatialLines")
}
)
for(i in seq_along(edges_igraph)) {
edges_igraph[[i]] <- spChFIDs(edges_igraph[[i]], as.character(i))
}
edges_igraph <- do.call(rbind, edges_igraph)
leaflet(vert) %>%
addTiles() %>%
addCircles(data = vert, radius = 1000, weight = 20) %>%
addPolylines(data = edges_igraph, color = "#000000", weight = edges$weight)
leaflet(vert) %>%
addTiles() %>%
addCircles(data = vert, radius = 1000, weight = 20) %>%
addPolylines(data = edges_igraph, color = "#000000", weight = 1)
leaflet(vert) %>%
addTiles() %>%
addCircles(data = vert, radius = 1000, weight = 20) %>%
addPolylines(data = edges_igraph, color = "#000000", weight = 0.01*edges$weight)
leaflet(vert) %>%
addTiles() %>%
addCircles(data = vert, radius = 1000, weight = 20) %>%
addPolylines(data = edges_igraph, color = "#000000", weight = 0.001*edges$weight)
leaflet(vert) %>%
addTiles() %>%
addCircles(data = vert, radius = 1000, weight = 20) %>%
addPolylines(data = edges_igraph, color = "#000000", weight = 0.0001*edges$weight)
leaflet(nodes) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addAwesomeMarkers(lat = ~lat,
lng = ~lon,
icon = icons,
popup = ~htmlEscape(location_name),
clusterOptions = markerClusterOptions())%>%
# Note that for the weight, we get the weight from the original CSV,
# not the edge list we processed with igraph and sp.
addPolylines(data = edges_igraph, color = "#000000", weight = 0.0001*edges$weight)
leaflet(nodes) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addAwesomeMarkers(lat = ~lat,
lng = ~lon,
icon = icons,
popup = ~htmlEscape(location_name),
#clusterOptions = markerClusterOptions()
)%>%
# Note that for the weight, we get the weight from the original CSV,
# not the edge list we processed with igraph and sp.
addPolylines(data = edges_igraph, color = "#000000", weight = 0.0001*edges$weight)
leaflet(nodes) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addAwesomeMarkers(lat = ~lat,
lng = ~lon,
icon = icons,
#popup = ~htmlEscape(location_name),
#clusterOptions = markerClusterOptions()
)%>%
# Note that for the weight, we get the weight from the original CSV,
# not the edge list we processed with igraph and sp.
addPolylines(data = edges_igraph, color = "#000000", weight = 0.0001*edges$weight)
leaflet(vert) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addCircles(data = vert, radius = 1000, weight = 20) %>%
addPolylines(data = edges_igraph, color = "#000000", weight = 0.0001*edges$weight)
leaflet(vert) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addCircles(data = vert, radius = 1000, weight = 20) %>%
addAwesomeMarkers(data = vert,
icon = icons,
popup = ~htmlEscape(location_name),
clusterOptions = markerClusterOptions())%>%
addPolylines(data = edges_igraph, color = "#000000", weight = 0.0001*edges$weight)
leaflet(vert) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addCircles(data = vert, radius = 1000, weight = 20) %>%
addMarkers(data = vert,
popup = ~htmlEscape(location_name),
clusterOptions = markerClusterOptions())%>%
addPolylines(data = edges_igraph, color = "#000000", weight = 0.0001*edges$weight)
library(leaflet.extras)
leaflet(vert) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addCircles(data = vert, radius = 1000, weight = 20) %>%
addMarkers(data = vert,
popup = ~htmlEscape(location_name),
clusterOptions = markerClusterOptions())%>%
addPolylines(data = edges_igraph, color = "#000000", weight = 0.0001*edges$weight)
vert
leaflet(nodes) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addAwesomeMarkers(lat = ~lat,
lng = ~lon,
icon = icons,
popup = ~htmlEscape(location_name),
clusterOptions = markerClusterOptions())%>%
addPolylines(data = test_gc)
leaflet(nodes) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addAwesomeMarkers(lat = ~lat,
lng = ~lon,
icon = icons,
popup = ~htmlEscape(location_name),
clusterOptions = markerClusterOptions())
setwd("C:\Users\30mat\Documents\VUW\Corona Virus Data Analytics\Mapping")
nodes <- read_csv("data/node_list_with_lat_lon.csv")
edges <- read_csv("data/edge_list.csv")
# Prepare edge start and end coords
source_nodes <- filter(nodes,
node_id %in% edges$source)
target_nodes <- filter(nodes,
node_id %in% edges$target)
source_node_coords <-
source_nodes %>% select(lon, lat)
names(source_node_coords) <- c("sourceLon",
"sourceLat")
target_node_coords <-
target_nodes %>% select(lon, lat)
names(target_node_coords) <- c("targetLon",
"targetLat")
edge_coords <- cbind(source_node_coords,
target_node_coords)
view(head(edge_coords, 10))
# Prepare data to be displayed as a network
# Create leaflet map
library(leaflet)
library(leaflet.extras)
library(htmltools)
library(geosphere)
icons <- awesomeIcons(
icon = 'ios-medical',
iconColor = 'black',
library = 'ion',
markerColor = "blue"
)
leaflet(nodes) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addAwesomeMarkers(lat = ~lat,
lng = ~lon,
icon = icons,
popup = ~htmlEscape(location_name),
clusterOptions = markerClusterOptions())
leaflet(vert) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addCircles(data = vert, radius = 1000, weight = 20) %>%
addMarkers(data = vert,
popup = ~htmlEscape(location_name),
clusterOptions = markerClusterOptions())%>%
addPolylines(data = edges_igraph, color = "#000000", weight = 0.0001*edges$weight)
leaflet(vert) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addMarkers(data = vert,
popup = ~htmlEscape(location_name),
clusterOptions = markerClusterOptions())%>%
addPolylines(data = edges_igraph, color = "#000000", weight = 0.0001*edges$weight)
